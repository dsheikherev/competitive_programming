//: [Previous](@previous)

// –í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ —Å–∫–æ–±–æ–∫ ‚Äò(‚Äô, ‚Äò)‚Äô, ‚Äò[‚Äò, ‚Äò]‚Äô, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ 2ùëõ
// 2n —Å–∫–æ–±–æ–∫, –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ. –í –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–≥—É—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –æ–±–∞ —Ç–∏–ø–∞ —Å–∫–æ–±–æ–∫ –∏–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö.

// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// –ù–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ n.

// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// –í—ã–≤–µ–¥–∏—Ç–µ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∂–¥—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å - –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.
// –°—á–∏—Ç–∞–π—Ç–µ, —á—Ç–æ ‚Äò(‚Äô < ‚Äò)‚Äô < ‚Äò[‚Äò < ‚Äò]‚Äô.

// –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
// 2
// –ü—Ä–∏–º–µ—Ä –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
// (())
// ()()
// ()[]
// ([])
// [()]
// [[]]
// []()
// [][]

import Foundation
import UIKit

let N = 2
var n = 2 * N
var a = [String] (repeating: "1", count: n)

var lineNumber = 1

func print_variant() {
    print("\(lineNumber): \(a)")
    lineNumber += 1
}

func isBracketsOrderCorrect(array: [String]) -> Bool {
    var stack = [String] ()
    
    for a in array {
        if a == "(" || a == "[" {
            stack.append(a)
        } else if a == ")" {
            if let s = stack.popLast() {
                if s != "(" {return false}
            }
        } else if a == "]" {
            if let s = stack.popLast() {
                if s != "[" {return false}
            }
        }
    }
    
    if stack.isEmpty {return true}
    return false
}

func rec(idx: Int, balanceRound: Int, balanceSquare: Int) {
    
    if idx >= n {
        if balanceSquare == 0 && balanceRound == 0 {
            if isBracketsOrderCorrect(array: a) {
                print_variant()
            }
        }
        return
    }
    
    a[idx] = "("
    rec(idx: idx + 1, balanceRound: balanceRound + 1, balanceSquare: balanceSquare)
    
    if balanceRound > 0 {
        a[idx] = ")"
        rec(idx: idx + 1, balanceRound: balanceRound - 1, balanceSquare: balanceSquare)
    }
    
    a[idx] = "["
    rec(idx: idx + 1, balanceRound: balanceRound, balanceSquare: balanceSquare + 1)
    
    if balanceSquare > 0 {
        a[idx] = "]"
        rec(idx: idx + 1, balanceRound: balanceRound, balanceSquare: balanceSquare - 1)
    }
}

rec(idx: 0, balanceRound: 0, balanceSquare: 0)

//: [Next](@next)
